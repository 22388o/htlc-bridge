package net.consensys.htlcbridge.transfer.soliditywrappers;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.5.16.
 */
@SuppressWarnings("rawtypes")
public class Erc20HtlcTransfer extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b50612a94806100206000396000f3fe608060405234801561001057600080fd5b506004361061023d5760003560e01c8063633858f31161013b578063b6f74cd6116100b8578063ce09a9dc1161007c578063ce09a9dc14610618578063d69d6e6f14610621578063dda562b314610634578063e858246814610647578063eb2838c3146106a05761023d565b8063b6f74cd614610556578063b9c136ec14610569578063bddf94c11461057c578063be821cd4146105a2578063c99c538f146105cd5761023d565b80639f2f8c56116100ff5780639f2f8c56146104c3578063abc6814e146104d6578063b043852d14610504578063b1f3dc8414610517578063b2e4fece1461052a5761023d565b8063633858f3146104345780636747b1e91461045a578063700b59681461046d578063721c3c64146104805780637bd7f87c146104b05761023d565b806328af0c8a116101c957806350f034241161018d57806350f03424146103d557806353f598b9146103e857806354fd4d50146103fb578063581cb2dc146104055780635f87fba9146104215761023d565b806328af0c8a1461035357806332413c90146103815780633541c2a2146103945780634ca96f4b146103b95780634db0022e146103cc5761023d565b8063181d15ba11610210578063181d15ba146102b35780631d20dad9146102c657806323113b76146102e957806324d7806c14610314578063256d464e146103275761023d565b8063079cf38a146102425780630c8d3698146102685780630d0e6e721461027d57806317b56fd3146102a0575b600080fd5b61025561025036600461264f565b6106c9565b6040519081526020015b60405180910390f35b61027b610276366004612729565b610717565b005b61029061028b366004612711565b61081f565b604051901515815260200161025f565b61027b6102ae366004612711565b61083f565b61027b6102c13660046127dd565b610a26565b6102906102d43660046125c2565b60126020526000908152604090205460ff1681565b6102fc6102f7366004612685565b610e7f565b6040516001600160a01b03909116815260200161025f565b6102906103223660046125c2565b610f20565b6102906103353660046125c2565b6001600160a01b031660009081526012602052604090205460ff1690565b6102906103613660046125c2565b6001600160a01b0390811660009081526005602052604090205416151590565b61027b61038f3660046125c2565b610f3e565b6102906103a2366004612711565b600090815260136020526040902060050154421190565b61027b6103c73660046126c3565b610fc1565b61025560045481565b61027b6103e33660046125c2565b611259565b61027b6103f63660046125c2565b6112aa565b6301346295610255565b60025460405167ffffffffffffffff909116815260200161025f565b61027b61042f36600461260e565b6114d5565b6104476104423660046125c2565b611757565b60405161ffff909116815260200161025f565b61027b610468366004612729565b611792565b61025561047b366004612711565b6119ec565b600154604080516001600160a01b0383168152600160a01b90920467ffffffffffffffff1660208301520161025f565b6102906104be3660046125c2565b611a3e565b6102906104d1366004612729565b611a84565b6102906104e43660046125c2565b6001600160a01b0316600090815260208190526040902060020154421190565b61027b6105123660046125dc565b611ab9565b61027b6105253660046125c2565b611b49565b6102556105383660046125c2565b6001600160a01b031660009081526020819052604090206002015490565b610255610564366004612711565b611b9d565b61027b610577366004612729565b611bd4565b61029061058a366004612711565b60009081526006602081905260409091200154421190565b6102906105b0366004612711565b6000908152601360205260409020546001600160a01b0316151590565b6105e06105db366004612711565b611cd2565b604080516001600160a01b039788168152969095166020870152938501929092526060840152608083015260a082015260c00161025f565b61025560115481565b61027b61062f366004612797565b611d60565b61029061064236600461274a565b611fa6565b61065a610655366004612711565b611ffb565b604080516001600160a01b039889168152968816602088015294909616938501939093526060840191909152608083015260a082015260c081019190915260e00161025f565b6102fc6106ae3660046125c2565b6005602052600090815260409020546001600160a01b031681565b600081156106f357506001600160a01b038216600090815260208190526040902060040154610711565b506001600160a01b0382166000908152602081905260409020600501545b92915050565b6000828152601360205260409020546001600160a01b03166107545760405162461bcd60e51b815260040161074b90612945565b60405180910390fd5b60008281526013602052604090208054600182015460029092015461078c92859285926001600160a01b039182169290911690611fa6565b6107a85760405162461bcd60e51b815260040161074b90612903565b600082815260136020526040902060060154156107d75760405162461bcd60e51b815260040161074b90612895565b6000828152601360205260408082206004810184905560026006909101555183917f83da23f35f5fd0d467a1dde4a2a7c2794d4640b6504c8a32c5a87b047796367e91a25050565b6000818152600660205260409020546001600160a01b031615155b919050565b6000818152601360205260409020546001600160a01b03166108735760405162461bcd60e51b815260040161074b90612945565b600081815260136020526040902060060154156108a25760405162461bcd60e51b815260040161074b90612895565b600081815260136020526040902060050154421161090c5760405162461bcd60e51b815260206004820152602160248201527f5472616e73616374696f6e20686173206e6f74207965742074696d65642d6f756044820152601d60fa1b606482015260840161074b565b6000818152601360205260409081902060018101548154600290920154925163a9059cbb60e01b81526001600160a01b0392831660048201526024810193909352169063a9059cbb90604401602060405180830381600087803b15801561097257600080fd5b505af1158015610986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109aa91906126f5565b6109e65760405162461bcd60e51b815260206004820152600d60248201526c1c99599d5b990819985a5b1959609a1b604482015260640161074b565b60008181526013602052604080822060016006909101555182917fb4533ebb723117aaa2826214b6c86a33ab251ad1095b054f04c1679e300bdaa991a250565b3360009081526003602052604090205460ff16610a555760405162461bcd60e51b815260040161074b9061285e565b610a5e82611a3e565b15610aab5760405162461bcd60e51b815260206004820152601a60248201527f566f74696e6720616c726561647920696e2070726f6772657373000000000000604482015260640161074b565b60008361ffff166003811115610ad157634e487b7160e01b600052602160045260246000fd5b90506001816003811115610af557634e487b7160e01b600052602160045260246000fd5b1415610b6857610b0483610f20565b15610b635760405162461bcd60e51b815260206004820152602960248201527f566f746541646441646d696e3a204164647265737320697320616c72656164796044820152681030b71030b236b4b760b91b606482015260840161074b565b610dc7565b6002816003811115610b8a57634e487b7160e01b600052602160045260246000fd5b1415610c5b57610b9983610f20565b610bf65760405162461bcd60e51b815260206004820152602860248201527f566f746552656d6f766541646d696e3a2041646472657373206973206e6f742060448201526730b71030b236b4b760c11b606482015260840161074b565b6001600160a01b038316331415610b635760405162461bcd60e51b8152602060048201526024808201527f566f746552656d6f766541646d696e3a2043616e206e6f742072656d6f76652060448201526339b2b63360e11b606482015260840161074b565b6003816003811115610c7d57634e487b7160e01b600052602160045260246000fd5b1415610dc7576040516301ffc9a760e01b81526319ab36c160e01b600482015283906001600160a01b038216906301ffc9a79060240160206040518083038186803b158015610ccb57600080fd5b505afa158015610cdf573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d0391906126f5565b610d755760405162461bcd60e51b815260206004820152603960248201527f566f74654368616e6765566f74696e673a2050726f706f73656420636f6e747260448201527f616374206e6f74206120766f74696e6720636f6e747261637400000000000000606482015260840161074b565b60008311610dc55760405162461bcd60e51b815260206004820152601b60248201527f50726f706f73656420766f74696e6720706572696f6420697320300000000000604482015260640161074b565b505b6001600160a01b0383166000908152602081905260409020805482919060ff19166001836003811115610e0a57634e487b7160e01b600052602160045260246000fd5b0217905550600154610e2d90600160a01b900467ffffffffffffffff16426129bb565b6001600160a01b03808516600090815260208190526040902060028101929092556001918201849055905416610e6d57610e6883600161207f565b610e79565b610e798484600161245b565b50505050565b60008215610ede576001600160a01b0384166000908152602081905260409020600401805483908110610ec257634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169050610f19565b6001600160a01b0384166000908152602081905260409020600501805483908110610ec257634e487b7160e01b600052603260045260246000fd5b9392505050565b6001600160a01b031660009081526003602052604090205460ff1690565b610f4733610f20565b610f635760405162461bcd60e51b815260040161074b906128cc565b6001600160a01b03811660008181526005602090815260409182902080546001600160a01b031916905590519182527f3ad52e1d360df277e254b4e5c9cbae79ea87778c8b07758e9311981b66333e1d91015b60405180910390a150565b6000818152601360205260409020546001600160a01b0316156110205760405162461bcd60e51b81526020600482015260176024820152765472616e7366657220616c72656164792065786973747360481b604482015260640161074b565b6001600160a01b03831660009081526012602052604090205460ff166110815760405162461bcd60e51b8152602060048201526016602482015275546f6b656e206e6f74207472616e7366657261626c6560501b604482015260640161074b565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038416906323b872dd90606401602060405180830381600087803b1580156110cf57600080fd5b505af11580156110e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061110791906126f5565b6111455760405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b604482015260640161074b565b60006011544261115591906129bb565b6040805160e081018252338082526001600160a01b0388811660208085019182528486018a8152606086018a815260006080880181815260a089018b815260c08a018381528e84526013909652918a9020985189549088166001600160a01b0319918216178a55955160018a018054919098169616959095179095559051600287015551600386015590516004850155905160058401555160069092019190915590519192509083907f470a379f66a6eef3070bd979b98c2dd6d7bfb668e17c67819722028655d540619061124b908890889087906001600160a01b039390931683526020830191909152604082015260600190565b60405180910390a350505050565b6001600160a01b038116600081815260126020908152604091829020805460ff1916905590519182527fce011ecaa68a6adc53c64d97441c1e5d0d818b4589fb0576303032c2aef963f69101610fb6565b3360009081526003602052604090205460ff166112d95760405162461bcd60e51b815260040161074b9061285e565b6112e281611a3e565b6113205760405162461bcd60e51b815260206004820152600f60248201526e566f7465206e6f742061637469766560881b604482015260640161074b565b6001600160a01b03811660009081526020819052604090206002015442116113945760405162461bcd60e51b815260206004820152602160248201527f566f74696e6720706572696f6420686173206e6f7420796574206578706972656044820152601960fa1b606482015260840161074b565b6001546002546001600160a01b0383811660009081526020819052604080822090516319ab36c160e01b81529290941693909284926319ab36c1926113ee9267ffffffffffffffff1691600480830192600501910161297c565b60206040518083038186803b15801561140657600080fd5b505afa15801561141a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143e91906126f5565b6001600160a01b03841660009081526020819052604090205490915060ff167f9d4ce721e9765ae20e979179e0edb2b4d216041d2824a032c04687c7f0da764d81600381111561149e57634e487b7160e01b600052602160045260246000fd5b6040805161ffff90921682526001600160a01b03871660208301528415159082015260600160405180910390a1610e79848361207f565b6114de33610f20565b6114fa5760405162461bcd60e51b815260040161074b906128cc565b6115038161081f565b1561154a5760405162461bcd60e51b81526020600482015260176024820152765472616e7366657220616c72656164792065786973747360481b604482015260640161074b565b6001600160a01b03808516600090815260056020526040902054166115aa5760405162461bcd60e51b8152602060048201526016602482015275546f6b656e206e6f74207472616e7366657261626c6560501b604482015260640161074b565b6000600454426115ba91906129bb565b9050604051806101000160405280336001600160a01b03168152602001856001600160a01b03168152602001866001600160a01b031681526020018481526020018381526020016000801b815260200182815260200160008152506006600084815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070155905050836001600160a01b0316336001600160a01b0316837f509a22359cd26b11a918295a1a78f9636ee8bef0e1252f3da5c631dee00c3693888786604051611748939291906001600160a01b039390931683526020830191909152604082015260600190565b60405180910390a45050505050565b6001600160a01b03811660009081526020819052604081205460ff16600381111561071157634e487b7160e01b600052602160045260246000fd5b61179b8261081f565b6117b75760405162461bcd60e51b815260040161074b90612945565b6000828152600660205260409020600181015460028201546003909201546117f292859285926001600160a01b039182169290911690611fa6565b61180e5760405162461bcd60e51b815260040161074b90612903565b6000828152600660205260409020600701541561183d5760405162461bcd60e51b815260040161074b90612895565b600082815260066020819052604090912001544211156118945760405162461bcd60e51b8152602060048201526012602482015271151c985b9cd9995c881d1a5b59590b5bdd5d60721b604482015260640161074b565b600082815260066020818152604080842060028101546001600160a01b03908116808752600585528387205496899052949093526001810154600390910154915163a9059cbb60e01b81529083166004820152602481019190915291921690819063a9059cbb90604401602060405180830381600087803b15801561191857600080fd5b505af115801561192c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195091906126f5565b61198d5760405162461bcd60e51b815260206004820152600e60248201526d1d1c985b99995c8819985a5b195960921b604482015260640161074b565b600084815260066020526040908190206005810185905560026007909101555184907fa70eb85bac87b136d136ad64b8d72ca165c84dcc438369df296bf4fddfb4a254906119de9086815260200190565b60405180910390a250505050565b600081815260136020526040812060060154158015611a1b575060008281526013602052604090206005015442115b15611a285750600361083a565b5060009081526013602052604090206006015490565b6000806001600160a01b03831660009081526020819052604090205460ff166003811115611a7c57634e487b7160e01b600052602160045260246000fd5b141592915050565b600081604051602001611a9991815260200190565b604051602081830303815290604052805190602001208314905092915050565b611ac233610f20565b611ade5760405162461bcd60e51b815260040161074b906128cc565b6001600160a01b0382811660008181526005602090815260409182902080546001600160a01b031916948616948517905581519283528201929092527f3416532c07455f30acfd3ba117394d859f7a84cb6e7d21d3c47909e7bf4bf480910160405180910390a15050565b6001600160a01b038116600081815260126020908152604091829020805460ff1916600117905590519182527fe09ab33dfca3a4f10512787bd5fdb83b7ac6fc4dfbb99ebac9e22d01f18de8539101610fb6565b600081815260066020819052604082200154421115611bbe5750600361083a565b5060009081526006602052604090206007015490565b601e54610100900460ff1680611bed5750601e5460ff16155b611c505760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161074b565b601e54610100900460ff16158015611c7b57601e805460ff1961ff0019909116610100171660011790555b611cb1336000908152600360205260409020805460ff191660019081179091556002805467ffffffffffffffff19169091179055565b601183905560048290558015611ccd57601e805461ff00191690555b505050565b600080600080600080611cfc876000908152601360205260409020546001600160a01b0316151590565b611d185760405162461bcd60e51b815260040161074b90612945565b5050506000938452505060136020525060409020805460018201546002830154600484015460058501546006909501546001600160a01b039485169694909316949193909290565b3360009081526003602052604090205460ff16611d8f5760405162461bcd60e51b815260040161074b9061285e565b611d9882611a3e565b611dd65760405162461bcd60e51b815260206004820152600f60248201526e566f7465206e6f742061637469766560881b604482015260640161074b565b6001600160a01b038216600090815260208190526040902060020154421115611e415760405162461bcd60e51b815260206004820152601960248201527f566f74696e6720706572696f6420686173206578706972656400000000000000604482015260640161074b565b6001600160a01b03821660009081526020818152604080832033845260030190915290205460ff1615611eb65760405162461bcd60e51b815260206004820152601960248201527f4163636f756e742068617320616c726561647920766f74656400000000000000604482015260640161074b565b60008361ffff166003811115611edc57634e487b7160e01b600052602160045260246000fd5b9050806003811115611efe57634e487b7160e01b600052602160045260246000fd5b6001600160a01b03841660009081526020819052604090205460ff166003811115611f3957634e487b7160e01b600052602160045260246000fd5b14611f9b5760405162461bcd60e51b815260206004820152602c60248201527f566f74696e6720616374696f6e20646f6573206e6f74206d617463682061637460448201526b1a5d99481c1c9bdc1bdcd85b60a21b606482015260840161074b565b610e7984848461245b565b604080516020808201969096526bffffffffffffffffffffffff19606095861b8116828401529390941b9092166054840152606880840191909152815180840390910181526088909201905280519101201490565b600080600080600080600061200f8861081f565b61202b5760405162461bcd60e51b815260040161074b90612945565b5050506000948552505060066020819052604090932080546001820154600283015460038401546005850154978501546007909501546001600160a01b039485169993851698949092169650945091929190565b80156121ff576001600160a01b0382166000908152602081905260409020805460019182015460ff909116918260038111156120cb57634e487b7160e01b600052602160045260246000fd5b1415612138576001600160a01b0384166000908152600360205260408120805460ff191660011790556002805467ffffffffffffffff169161210c83612a12565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550506121fc565b600282600381111561215a57634e487b7160e01b600052602160045260246000fd5b1415612198576001600160a01b0384166000908152600360205260408120805460ff191690556002805467ffffffffffffffff169161210c836129d3565b60038260038111156121ba57634e487b7160e01b600052602160045260246000fd5b14156121fc57600180546001600160a01b0319166001600160a01b0386161767ffffffffffffffff60a01b1916600160a01b67ffffffffffffffff8416021790555b50505b6001600160a01b0382166000908152602081815260408083206004018054825181850281018501909352808352919290919083018282801561226a57602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161224c575b5050505050905060005b815181101561230357600080856001600160a01b03166001600160a01b0316815260200190815260200160002060030160008383815181106122c657634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169055806122fb816129f7565b915050612274565b506001600160a01b0383166000908152602081815260408083206005018054825181850281018501909352808352919290919083018282801561236f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612351575b5050505050905060005b815181101561240857600080866001600160a01b03166001600160a01b0316815260200190815260200160002060030160008383815181106123cb57634e487b7160e01b600052603260045260246000fd5b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff1916905580612400816129f7565b915050612379565b506001600160a01b0384166000908152602081905260408120805460ff19168155600181018290556002810182905590612445600483018261255f565b61245360058301600061255f565b505050505050565b6040805133815261ffff851660208201526001600160a01b03841681830152821515606082015290517f32b8c3a9535767c48b7f4575cbd5402f63b03ba60ee9767254ee701a41123b069181900360800190a16001600160a01b0382166000908152602081815260408083203384526003019091529020805460ff191660011790558015612521576001600160a01b0382166000908152602081815260408220600401805460018101825590835291200180546001600160a01b03191633179055611ccd565b6001600160a01b0382166000908152602081815260408220600501805460018101825590835291200180546001600160a01b03191633179055505050565b508054600082559060005260206000209081019061257d9190612580565b50565b5b808211156125955760008155600101612581565b5090565b80356001600160a01b038116811461083a57600080fd5b803561ffff8116811461083a57600080fd5b6000602082840312156125d3578081fd5b610f1982612599565b600080604083850312156125ee578081fd5b6125f783612599565b915061260560208401612599565b90509250929050565b60008060008060808587031215612623578182fd5b61262c85612599565b935061263a60208601612599565b93969395505050506040820135916060013590565b60008060408385031215612661578182fd5b61266a83612599565b9150602083013561267a81612a50565b809150509250929050565b600080600060608486031215612699578283fd5b6126a284612599565b925060208401356126b281612a50565b929592945050506040919091013590565b6000806000606084860312156126d7578283fd5b6126e084612599565b95602085013595506040909401359392505050565b600060208284031215612706578081fd5b8151610f1981612a50565b600060208284031215612722578081fd5b5035919050565b6000806040838503121561273b578182fd5b50508035926020909101359150565b600080600080600060a08688031215612761578081fd5b853594506020860135935061277860408701612599565b925061278660608701612599565b949793965091946080013592915050565b6000806000606084860312156127ab578283fd5b6127b4846125b0565b92506127c260208501612599565b915060408401356127d281612a50565b809150509250925092565b6000806000606084860312156127f1578283fd5b6127fa846125b0565b925061280860208501612599565b9150604084013590509250925092565b6000815480845260208085019450838352808320835b838110156128535781546001600160a01b03168752958201956001918201910161282e565b509495945050505050565b6020808252601a908201527f6d73672e73656e646572206973206e6f7420616e2061646d696e000000000000604082015260600190565b6020808252601a908201527f5472616e73666572206e6f7420696e206f70656e207374617465000000000000604082015260600190565b60208082526019908201527f4e6f7420616e20617574686f72697365642072656c6179657200000000000000604082015260600190565b60208082526022908201527f507265696d61676520646f6573206e6f74206d6174636820636f6d6d69746d656040820152611b9d60f21b606082015260800190565b60208082526017908201527f5472616e7366657220646f6573206e6f74206578697374000000000000000000604082015260600190565b600067ffffffffffffffff851682526060602083015261299f6060830185612818565b82810360408401526129b18185612818565b9695505050505050565b600082198211156129ce576129ce612a3a565b500190565b600067ffffffffffffffff8216806129ed576129ed612a3a565b6000190192915050565b6000600019821415612a0b57612a0b612a3a565b5060010190565b600067ffffffffffffffff80831681811415612a3057612a30612a3a565b6001019392505050565b634e487b7160e01b600052601160045260246000fd5b801515811461257d57600080fdfea2646970667358221220927ac9f7d77f1b9a250d06afda1376dc96596da7ce2e97efd5b4f1007e0488b464736f6c63430008020033";

    public static final String FUNC_ACTIONVOTES = "actionVotes";

    public static final String FUNC_ADDDESTALLOWEDTOKEN = "addDestAllowedToken";

    public static final String FUNC_ADDSOURCEALLOWEDTOKEN = "addSourceAllowedToken";

    public static final String FUNC_DESTALLOWEDTOKENS = "destAllowedTokens";

    public static final String FUNC_DESTTIMELOCKPERIOD = "destTimeLockPeriod";

    public static final String FUNC_DESTTRANSFEREXISTS = "destTransferExists";

    public static final String FUNC_DESTTRANSFEREXPIRED = "destTransferExpired";

    public static final String FUNC_DESTTRANSFERSTATE = "destTransferState";

    public static final String FUNC_ENDOFVOTINGPERIOD = "endOfVotingPeriod";

    public static final String FUNC_FINALISETRANSFERFROMOTHERBLOCKCHAIN = "finaliseTransferFromOtherBlockchain";

    public static final String FUNC_FINALISETRANSFERTOOTHERBLOCKCHAIN = "finaliseTransferToOtherBlockchain";

    public static final String FUNC_GETDESTINFO = "getDestInfo";

    public static final String FUNC_GETNUMADMINS = "getNumAdmins";

    public static final String FUNC_GETSOURCEINFO = "getSourceInfo";

    public static final String FUNC_GETVOTINGCONFIG = "getVotingConfig";

    public static final String FUNC_INITIALISE = "initialise";

    public static final String FUNC_ISADMIN = "isAdmin";

    public static final String FUNC_ISDESTALLOWEDTOKEN = "isDestAllowedToken";

    public static final String FUNC_ISSOURCEALLOWEDTOKEN = "isSourceAllowedToken";

    public static final String FUNC_ISVOTEACTIVE = "isVoteActive";

    public static final String FUNC_NEWTRANSFERFROMOTHERBLOCKCHAIN = "newTransferFromOtherBlockchain";

    public static final String FUNC_NEWTRANSFERTOOTHERBLOCKCHAIN = "newTransferToOtherBlockchain";

    public static final String FUNC_NUMVOTES = "numVotes";

    public static final String FUNC_PREIMAGEMATCHESCOMMITMENT = "preimageMatchesCommitment";

    public static final String FUNC_PREIMAGEMATCHESCOMMITMENTOLD = "preimageMatchesCommitmentOld";

    public static final String FUNC_PROPOSEVOTE = "proposeVote";

    public static final String FUNC_REFUNDTRANSFERTOOTHERBLOCKCHAIN = "refundTransferToOtherBlockchain";

    public static final String FUNC_REMOVEDESTALLOWEDTOKEN = "removeDestAllowedToken";

    public static final String FUNC_REMOVESOURCEALLOWEDTOKEN = "removeSourceAllowedToken";

    public static final String FUNC_SOURCEALLOWEDTOKENS = "sourceAllowedTokens";

    public static final String FUNC_SOURCETIMELOCKPERIOD = "sourceTimeLockPeriod";

    public static final String FUNC_SOURCETRANSFEREXISTS = "sourceTransferExists";

    public static final String FUNC_SOURCETRANSFEREXPIRED = "sourceTransferExpired";

    public static final String FUNC_SOURCETRANSFERSTATE = "sourceTransferState";

    public static final String FUNC_VERSION = "version";

    public static final String FUNC_VOTE = "vote";

    public static final String FUNC_VOTEPERIODEXPIRED = "votePeriodExpired";

    public static final String FUNC_VOTETYPE = "voteType";

    public static final String FUNC_WHOVOTED = "whoVoted";

    public static final Event DESTALLOWEDTOKENADDED_EVENT = new Event("DestAllowedTokenAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}));
    ;

    public static final Event DESTALLOWEDTOKENREMOVED_EVENT = new Event("DestAllowedTokenRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event DESTTRANSFERCOMPLETED_EVENT = new Event("DestTransferCompleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event DESTTRANSFERINIT_EVENT = new Event("DestTransferInit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DESTTRANSFERREFUNDED_EVENT = new Event("DestTransferRefunded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event SOURCEALLOWEDTOKENADDED_EVENT = new Event("SourceAllowedTokenAdded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event SOURCEALLOWEDTOKENREMOVED_EVENT = new Event("SourceAllowedTokenRemoved", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
    ;

    public static final Event SOURCETRANSFERCOMPLETED_EVENT = new Event("SourceTransferCompleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event SOURCETRANSFERINIT_EVENT = new Event("SourceTransferInit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SOURCETRANSFERREFUNDED_EVENT = new Event("SourceTransferRefunded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event VOTERESULT_EVENT = new Event("VoteResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event VOTED_EVENT = new Event("Voted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    @Deprecated
    protected Erc20HtlcTransfer(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Erc20HtlcTransfer(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Erc20HtlcTransfer(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Erc20HtlcTransfer(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DestAllowedTokenAddedEventResponse> getDestAllowedTokenAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DESTALLOWEDTOKENADDED_EVENT, transactionReceipt);
        ArrayList<DestAllowedTokenAddedEventResponse> responses = new ArrayList<DestAllowedTokenAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DestAllowedTokenAddedEventResponse typedResponse = new DestAllowedTokenAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.otherBlockchainTokenContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.thisBlockchainTokenContract = (String) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DestAllowedTokenAddedEventResponse> destAllowedTokenAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DestAllowedTokenAddedEventResponse>() {
            @Override
            public DestAllowedTokenAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DESTALLOWEDTOKENADDED_EVENT, log);
                DestAllowedTokenAddedEventResponse typedResponse = new DestAllowedTokenAddedEventResponse();
                typedResponse.log = log;
                typedResponse.otherBlockchainTokenContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.thisBlockchainTokenContract = (String) eventValues.getNonIndexedValues().get(1).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DestAllowedTokenAddedEventResponse> destAllowedTokenAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DESTALLOWEDTOKENADDED_EVENT));
        return destAllowedTokenAddedEventFlowable(filter);
    }

    public List<DestAllowedTokenRemovedEventResponse> getDestAllowedTokenRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DESTALLOWEDTOKENREMOVED_EVENT, transactionReceipt);
        ArrayList<DestAllowedTokenRemovedEventResponse> responses = new ArrayList<DestAllowedTokenRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DestAllowedTokenRemovedEventResponse typedResponse = new DestAllowedTokenRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DestAllowedTokenRemovedEventResponse> destAllowedTokenRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DestAllowedTokenRemovedEventResponse>() {
            @Override
            public DestAllowedTokenRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DESTALLOWEDTOKENREMOVED_EVENT, log);
                DestAllowedTokenRemovedEventResponse typedResponse = new DestAllowedTokenRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.tokenContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DestAllowedTokenRemovedEventResponse> destAllowedTokenRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DESTALLOWEDTOKENREMOVED_EVENT));
        return destAllowedTokenRemovedEventFlowable(filter);
    }

    public List<DestTransferCompletedEventResponse> getDestTransferCompletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DESTTRANSFERCOMPLETED_EVENT, transactionReceipt);
        ArrayList<DestTransferCompletedEventResponse> responses = new ArrayList<DestTransferCompletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DestTransferCompletedEventResponse typedResponse = new DestTransferCompletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.preimage = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DestTransferCompletedEventResponse> destTransferCompletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DestTransferCompletedEventResponse>() {
            @Override
            public DestTransferCompletedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DESTTRANSFERCOMPLETED_EVENT, log);
                DestTransferCompletedEventResponse typedResponse = new DestTransferCompletedEventResponse();
                typedResponse.log = log;
                typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.preimage = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DestTransferCompletedEventResponse> destTransferCompletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DESTTRANSFERCOMPLETED_EVENT));
        return destTransferCompletedEventFlowable(filter);
    }

    public List<DestTransferInitEventResponse> getDestTransferInitEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DESTTRANSFERINIT_EVENT, transactionReceipt);
        ArrayList<DestTransferInitEventResponse> responses = new ArrayList<DestTransferInitEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DestTransferInitEventResponse typedResponse = new DestTransferInitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.relayer = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.recipient = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.tokenContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.timeLock = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DestTransferInitEventResponse> destTransferInitEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DestTransferInitEventResponse>() {
            @Override
            public DestTransferInitEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DESTTRANSFERINIT_EVENT, log);
                DestTransferInitEventResponse typedResponse = new DestTransferInitEventResponse();
                typedResponse.log = log;
                typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.relayer = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.recipient = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.tokenContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.timeLock = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DestTransferInitEventResponse> destTransferInitEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DESTTRANSFERINIT_EVENT));
        return destTransferInitEventFlowable(filter);
    }

    public List<DestTransferRefundedEventResponse> getDestTransferRefundedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DESTTRANSFERREFUNDED_EVENT, transactionReceipt);
        ArrayList<DestTransferRefundedEventResponse> responses = new ArrayList<DestTransferRefundedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DestTransferRefundedEventResponse typedResponse = new DestTransferRefundedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DestTransferRefundedEventResponse> destTransferRefundedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DestTransferRefundedEventResponse>() {
            @Override
            public DestTransferRefundedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DESTTRANSFERREFUNDED_EVENT, log);
                DestTransferRefundedEventResponse typedResponse = new DestTransferRefundedEventResponse();
                typedResponse.log = log;
                typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DestTransferRefundedEventResponse> destTransferRefundedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DESTTRANSFERREFUNDED_EVENT));
        return destTransferRefundedEventFlowable(filter);
    }

    public List<SourceAllowedTokenAddedEventResponse> getSourceAllowedTokenAddedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SOURCEALLOWEDTOKENADDED_EVENT, transactionReceipt);
        ArrayList<SourceAllowedTokenAddedEventResponse> responses = new ArrayList<SourceAllowedTokenAddedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SourceAllowedTokenAddedEventResponse typedResponse = new SourceAllowedTokenAddedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SourceAllowedTokenAddedEventResponse> sourceAllowedTokenAddedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SourceAllowedTokenAddedEventResponse>() {
            @Override
            public SourceAllowedTokenAddedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SOURCEALLOWEDTOKENADDED_EVENT, log);
                SourceAllowedTokenAddedEventResponse typedResponse = new SourceAllowedTokenAddedEventResponse();
                typedResponse.log = log;
                typedResponse.tokenContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SourceAllowedTokenAddedEventResponse> sourceAllowedTokenAddedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SOURCEALLOWEDTOKENADDED_EVENT));
        return sourceAllowedTokenAddedEventFlowable(filter);
    }

    public List<SourceAllowedTokenRemovedEventResponse> getSourceAllowedTokenRemovedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SOURCEALLOWEDTOKENREMOVED_EVENT, transactionReceipt);
        ArrayList<SourceAllowedTokenRemovedEventResponse> responses = new ArrayList<SourceAllowedTokenRemovedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SourceAllowedTokenRemovedEventResponse typedResponse = new SourceAllowedTokenRemovedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tokenContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SourceAllowedTokenRemovedEventResponse> sourceAllowedTokenRemovedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SourceAllowedTokenRemovedEventResponse>() {
            @Override
            public SourceAllowedTokenRemovedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SOURCEALLOWEDTOKENREMOVED_EVENT, log);
                SourceAllowedTokenRemovedEventResponse typedResponse = new SourceAllowedTokenRemovedEventResponse();
                typedResponse.log = log;
                typedResponse.tokenContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SourceAllowedTokenRemovedEventResponse> sourceAllowedTokenRemovedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SOURCEALLOWEDTOKENREMOVED_EVENT));
        return sourceAllowedTokenRemovedEventFlowable(filter);
    }

    public List<SourceTransferCompletedEventResponse> getSourceTransferCompletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SOURCETRANSFERCOMPLETED_EVENT, transactionReceipt);
        ArrayList<SourceTransferCompletedEventResponse> responses = new ArrayList<SourceTransferCompletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SourceTransferCompletedEventResponse typedResponse = new SourceTransferCompletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SourceTransferCompletedEventResponse> sourceTransferCompletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SourceTransferCompletedEventResponse>() {
            @Override
            public SourceTransferCompletedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SOURCETRANSFERCOMPLETED_EVENT, log);
                SourceTransferCompletedEventResponse typedResponse = new SourceTransferCompletedEventResponse();
                typedResponse.log = log;
                typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SourceTransferCompletedEventResponse> sourceTransferCompletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SOURCETRANSFERCOMPLETED_EVENT));
        return sourceTransferCompletedEventFlowable(filter);
    }

    public List<SourceTransferInitEventResponse> getSourceTransferInitEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SOURCETRANSFERINIT_EVENT, transactionReceipt);
        ArrayList<SourceTransferInitEventResponse> responses = new ArrayList<SourceTransferInitEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SourceTransferInitEventResponse typedResponse = new SourceTransferInitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.timeLock = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SourceTransferInitEventResponse> sourceTransferInitEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SourceTransferInitEventResponse>() {
            @Override
            public SourceTransferInitEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SOURCETRANSFERINIT_EVENT, log);
                SourceTransferInitEventResponse typedResponse = new SourceTransferInitEventResponse();
                typedResponse.log = log;
                typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.timeLock = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SourceTransferInitEventResponse> sourceTransferInitEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SOURCETRANSFERINIT_EVENT));
        return sourceTransferInitEventFlowable(filter);
    }

    public List<SourceTransferRefundedEventResponse> getSourceTransferRefundedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SOURCETRANSFERREFUNDED_EVENT, transactionReceipt);
        ArrayList<SourceTransferRefundedEventResponse> responses = new ArrayList<SourceTransferRefundedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SourceTransferRefundedEventResponse typedResponse = new SourceTransferRefundedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SourceTransferRefundedEventResponse> sourceTransferRefundedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SourceTransferRefundedEventResponse>() {
            @Override
            public SourceTransferRefundedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SOURCETRANSFERREFUNDED_EVENT, log);
                SourceTransferRefundedEventResponse typedResponse = new SourceTransferRefundedEventResponse();
                typedResponse.log = log;
                typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SourceTransferRefundedEventResponse> sourceTransferRefundedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SOURCETRANSFERREFUNDED_EVENT));
        return sourceTransferRefundedEventFlowable(filter);
    }

    public List<VoteResultEventResponse> getVoteResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VOTERESULT_EVENT, transactionReceipt);
        ArrayList<VoteResultEventResponse> responses = new ArrayList<VoteResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoteResultEventResponse typedResponse = new VoteResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._voteTarget = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._result = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VoteResultEventResponse> voteResultEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VoteResultEventResponse>() {
            @Override
            public VoteResultEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOTERESULT_EVENT, log);
                VoteResultEventResponse typedResponse = new VoteResultEventResponse();
                typedResponse.log = log;
                typedResponse._action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._voteTarget = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._result = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VoteResultEventResponse> voteResultEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTERESULT_EVENT));
        return voteResultEventFlowable(filter);
    }

    public List<VotedEventResponse> getVotedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VOTED_EVENT, transactionReceipt);
        ArrayList<VotedEventResponse> responses = new ArrayList<VotedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VotedEventResponse typedResponse = new VotedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._participant = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._action = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._voteTarget = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._votedFor = (Boolean) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VotedEventResponse> votedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VotedEventResponse>() {
            @Override
            public VotedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOTED_EVENT, log);
                VotedEventResponse typedResponse = new VotedEventResponse();
                typedResponse.log = log;
                typedResponse._participant = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._action = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._voteTarget = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._votedFor = (Boolean) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VotedEventResponse> votedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTED_EVENT));
        return votedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> actionVotes(String _voteTarget) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACTIONVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _voteTarget)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addDestAllowedToken(String _otherBlockchainTokenContract, String _thisBlockchainTokenContract) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDDESTALLOWEDTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _otherBlockchainTokenContract), 
                new org.web3j.abi.datatypes.Address(160, _thisBlockchainTokenContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> addSourceAllowedToken(String _tokenContract) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ADDSOURCEALLOWEDTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _tokenContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> destAllowedTokens(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DESTALLOWEDTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> destTimeLockPeriod() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DESTTIMELOCKPERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> destTransferExists(byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DESTTRANSFEREXISTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> destTransferExpired(byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DESTTRANSFEREXPIRED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> destTransferState(byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DESTTRANSFERSTATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> endOfVotingPeriod(String _voteTarget) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ENDOFVOTINGPERIOD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _voteTarget)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> finaliseTransferFromOtherBlockchain(byte[] _commitment, byte[] _preimageSalt) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FINALISETRANSFERFROMOTHERBLOCKCHAIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment), 
                new org.web3j.abi.datatypes.generated.Bytes32(_preimageSalt)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> finaliseTransferToOtherBlockchain(byte[] _commitment, byte[] _preimageSalt) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FINALISETRANSFERTOOTHERBLOCKCHAIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment), 
                new org.web3j.abi.datatypes.generated.Bytes32(_preimageSalt)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<String, String, String, BigInteger, byte[], BigInteger, BigInteger>> getDestInfo(byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETDESTINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<String, String, String, BigInteger, byte[], BigInteger, BigInteger>>(function,
                new Callable<Tuple7<String, String, String, BigInteger, byte[], BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, String, BigInteger, byte[], BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, BigInteger, byte[], BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (byte[]) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getNumAdmins() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNUMADMINS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple6<String, String, BigInteger, byte[], BigInteger, BigInteger>> getSourceInfo(byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSOURCEINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple6<String, String, BigInteger, byte[], BigInteger, BigInteger>>(function,
                new Callable<Tuple6<String, String, BigInteger, byte[], BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<String, String, BigInteger, byte[], BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, BigInteger, byte[], BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (byte[]) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> getVotingConfig() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETVOTINGCONFIG, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint64>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> initialise(BigInteger _sourceTimeLock, BigInteger _destTimeLock) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALISE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_sourceTimeLock), 
                new org.web3j.abi.datatypes.generated.Uint256(_destTimeLock)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isAdmin(String _mightBeAdmin) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _mightBeAdmin)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isDestAllowedToken(String _tokenContract) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISDESTALLOWEDTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _tokenContract)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isSourceAllowedToken(String _tokenContract) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISSOURCEALLOWEDTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _tokenContract)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isVoteActive(String _voteTarget) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISVOTEACTIVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _voteTarget)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> newTransferFromOtherBlockchain(String _otherBlockchainTokenContract, String _recipient, BigInteger _amount, byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_NEWTRANSFERFROMOTHERBLOCKCHAIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _otherBlockchainTokenContract), 
                new org.web3j.abi.datatypes.Address(160, _recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount), 
                new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> newTransferToOtherBlockchain(String _tokenContract, BigInteger _amount, byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_NEWTRANSFERTOOTHERBLOCKCHAIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _tokenContract), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount), 
                new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> numVotes(String _voteTarget, Boolean _votedFor) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NUMVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _voteTarget), 
                new org.web3j.abi.datatypes.Bool(_votedFor)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> preimageMatchesCommitment(byte[] _commitment, byte[] _preimage, String _user, String _token, BigInteger _amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PREIMAGEMATCHESCOMMITMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment), 
                new org.web3j.abi.datatypes.generated.Bytes32(_preimage), 
                new org.web3j.abi.datatypes.Address(160, _user), 
                new org.web3j.abi.datatypes.Address(160, _token), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> preimageMatchesCommitmentOld(byte[] _commitment, byte[] _preimage) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PREIMAGEMATCHESCOMMITMENTOLD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment), 
                new org.web3j.abi.datatypes.generated.Bytes32(_preimage)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> proposeVote(BigInteger _action, String _voteTarget, BigInteger _additionalInfo1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PROPOSEVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint16(_action), 
                new org.web3j.abi.datatypes.Address(160, _voteTarget), 
                new org.web3j.abi.datatypes.generated.Uint256(_additionalInfo1)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> refundTransferToOtherBlockchain(byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REFUNDTRANSFERTOOTHERBLOCKCHAIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeDestAllowedToken(String _otherBlockchainTokenContract) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVEDESTALLOWEDTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _otherBlockchainTokenContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeSourceAllowedToken(String _tokenContract) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REMOVESOURCEALLOWEDTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _tokenContract)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> sourceAllowedTokens(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SOURCEALLOWEDTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> sourceTimeLockPeriod() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SOURCETIMELOCKPERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> sourceTransferExists(byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SOURCETRANSFEREXISTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> sourceTransferExpired(byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SOURCETRANSFEREXPIRED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> sourceTransferState(byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SOURCETRANSFERSTATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> version() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> vote(BigInteger _action, String _voteTarget, Boolean _voteFor) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint16(_action), 
                new org.web3j.abi.datatypes.Address(160, _voteTarget), 
                new org.web3j.abi.datatypes.Bool(_voteFor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> votePeriodExpired(String _voteTarget) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VOTEPERIODEXPIRED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _voteTarget)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> voteType(String _voteTarget) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VOTETYPE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _voteTarget)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> whoVoted(String _voteTarget, Boolean _votedFor, BigInteger _index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_WHOVOTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _voteTarget), 
                new org.web3j.abi.datatypes.Bool(_votedFor), 
                new org.web3j.abi.datatypes.generated.Uint256(_index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static Erc20HtlcTransfer load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Erc20HtlcTransfer(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Erc20HtlcTransfer load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Erc20HtlcTransfer(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Erc20HtlcTransfer load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Erc20HtlcTransfer(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Erc20HtlcTransfer load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Erc20HtlcTransfer(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Erc20HtlcTransfer> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Erc20HtlcTransfer.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Erc20HtlcTransfer> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Erc20HtlcTransfer.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Erc20HtlcTransfer> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Erc20HtlcTransfer.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Erc20HtlcTransfer> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Erc20HtlcTransfer.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class DestAllowedTokenAddedEventResponse extends BaseEventResponse {
        public String otherBlockchainTokenContract;

        public String thisBlockchainTokenContract;
    }

    public static class DestAllowedTokenRemovedEventResponse extends BaseEventResponse {
        public String tokenContract;
    }

    public static class DestTransferCompletedEventResponse extends BaseEventResponse {
        public byte[] commitment;

        public byte[] preimage;
    }

    public static class DestTransferInitEventResponse extends BaseEventResponse {
        public byte[] commitment;

        public String relayer;

        public String recipient;

        public String tokenContract;

        public BigInteger amount;

        public BigInteger timeLock;
    }

    public static class DestTransferRefundedEventResponse extends BaseEventResponse {
        public byte[] commitment;
    }

    public static class SourceAllowedTokenAddedEventResponse extends BaseEventResponse {
        public String tokenContract;
    }

    public static class SourceAllowedTokenRemovedEventResponse extends BaseEventResponse {
        public String tokenContract;
    }

    public static class SourceTransferCompletedEventResponse extends BaseEventResponse {
        public byte[] commitment;
    }

    public static class SourceTransferInitEventResponse extends BaseEventResponse {
        public byte[] commitment;

        public String sender;

        public String tokenContract;

        public BigInteger amount;

        public BigInteger timeLock;
    }

    public static class SourceTransferRefundedEventResponse extends BaseEventResponse {
        public byte[] commitment;
    }

    public static class VoteResultEventResponse extends BaseEventResponse {
        public BigInteger _action;

        public String _voteTarget;

        public Boolean _result;
    }

    public static class VotedEventResponse extends BaseEventResponse {
        public String _participant;

        public BigInteger _action;

        public String _voteTarget;

        public Boolean _votedFor;
    }
}
