package net.consensys.htlcbridge.transfer.soliditywrappers;

import io.reactivex.Flowable;
import io.reactivex.functions.Function;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;
import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.generated.Bytes32;
import org.web3j.abi.datatypes.generated.Uint16;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint64;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple2;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;

/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the 
 * <a href="https://github.com/web3j/web3j/tree/master/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 4.8.7-SNAPSHOT.
 */
@SuppressWarnings("rawtypes")
public class Erc20HtlcTransfer extends Contract {
    public static final String BINARY = "608060405234801561001057600080fd5b50612bfd806100206000396000f3fe608060405234801561001057600080fd5b50600436106102115760003560e01c8063633858f311610125578063b9c136ec116100ad578063ce09a9dc1161007c578063ce09a9dc146105eb578063d69d6e6f146105f4578063dda562b314610607578063e85824681461061a578063eb2838c31461067357600080fd5b8063b9c136ec1461053c578063bddf94c11461054f578063be821cd414610575578063c99c538f146105a057600080fd5b80637bd7f87c116100f45780637bd7f87c146104a95780639f2f8c56146104bc578063abc6814e146104cf578063b2e4fece146104fd578063b6f74cd61461052957600080fd5b8063633858f3146104135780636747b1e914610453578063700b596814610466578063721c3c641461047957600080fd5b8063256d464e116101a85780634db0022e116101775780634db0022e146103be57806353f598b9146103c757806354fd4d50146103da578063581cb2dc146103e45780635f87fba91461040057600080fd5b8063256d464e1461032c57806328af0c8a146103585780633541c2a2146103865780634ca96f4b146103ab57600080fd5b8063181d15ba116101e4578063181d15ba1461029f5780631d20dad9146102b257806323113b76146102d557806324d7806c1461030057600080fd5b8063079cf38a146102165780630c8d36981461023c5780630d0e6e721461025157806317b56fd31461028c575b600080fd5b61022961022436600461276c565b61069c565b6040519081526020015b60405180910390f35b61024f61024a3660046127a3565b6106ea565b005b61027c61025f3660046127c5565b6000908152600660205260409020546001600160a01b0316151590565b6040519015158152602001610233565b61024f61029a3660046127c5565b6107f2565b61024f6102ad3660046127f0565b6109d9565b61027c6102c036600461282c565b60126020526000908152604090205460ff1681565b6102e86102e3366004612847565b610e78565b6040516001600160a01b039091168152602001610233565b61027c61030e36600461282c565b6001600160a01b031660009081526003602052604090205460ff1690565b61027c61033a36600461282c565b6001600160a01b031660009081526012602052604090205460ff1690565b61027c61036636600461282c565b6001600160a01b0390811660009081526005602052604090205416151590565b61027c6103943660046127c5565b600090815260136020526040902060050154421190565b61024f6103b9366004612886565b610efd565b61022960045481565b61024f6103d536600461282c565b611195565b6301346295610229565b60025460405167ffffffffffffffff9091168152602001610233565b61024f61040e3660046128b9565b61139d565b61044061042136600461282c565b6001600160a01b031660009081526020819052604090205461ffff1690565b60405161ffff9091168152602001610233565b61024f6104613660046127a3565b611668565b6102296104743660046127c5565b6118d1565b600154604080516001600160a01b0383168152600160a01b90920467ffffffffffffffff16602083015201610233565b61027c6104b736600461282c565b611923565b61027c6104ca3660046127a3565b611944565b61027c6104dd36600461282c565b6001600160a01b0316600090815260208190526040902060020154421190565b61022961050b36600461282c565b6001600160a01b031660009081526020819052604090206002015490565b6102296105373660046127c5565b611979565b61024f61054a3660046127a3565b6119b0565b61027c61055d3660046127c5565b60009081526006602081905260409091200154421190565b61027c6105833660046127c5565b6000908152601360205260409020546001600160a01b0316151590565b6105b36105ae3660046127c5565b611aa4565b604080516001600160a01b039788168152969095166020870152938501929092526060840152608083015260a082015260c001610233565b61022960115481565b61024f6106023660046128fb565b611b32565b61027c610615366004612942565b611d16565b61062d6106283660046127c5565b611d6b565b604080516001600160a01b039889168152968816602088015294909616938501939093526060840191909152608083015260a082015260c081019190915260e001610233565b6102e861068136600461282c565b6005602052600090815260409020546001600160a01b031681565b600081156106c657506001600160a01b0382166000908152602081905260409020600401546106e4565b506001600160a01b0382166000908152602081905260409020600501545b92915050565b6000828152601360205260409020546001600160a01b03166107275760405162461bcd60e51b815260040161071e90612990565b60405180910390fd5b60008281526013602052604090208054600182015460029092015461075f92859285926001600160a01b039182169290911690611d16565b61077b5760405162461bcd60e51b815260040161071e906129c7565b600082815260136020526040902060060154156107aa5760405162461bcd60e51b815260040161071e90612a09565b6000828152601360205260408082206004810184905560026006909101555183917f83da23f35f5fd0d467a1dde4a2a7c2794d4640b6504c8a32c5a87b047796367e91a25050565b6000818152601360205260409020546001600160a01b03166108265760405162461bcd60e51b815260040161071e90612990565b600081815260136020526040902060060154156108555760405162461bcd60e51b815260040161071e90612a09565b60008181526013602052604090206005015442116108bf5760405162461bcd60e51b815260206004820152602160248201527f5472616e73616374696f6e20686173206e6f74207965742074696d65642d6f756044820152601d60fa1b606482015260840161071e565b6000818152601360205260409081902060018101548154600290920154925163a9059cbb60e01b81526001600160a01b0392831660048201526024810193909352169063a9059cbb90604401602060405180830381600087803b15801561092557600080fd5b505af1158015610939573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095d9190612a40565b6109995760405162461bcd60e51b815260206004820152600d60248201526c1c99599d5b990819985a5b1959609a1b604482015260640161071e565b60008181526013602052604080822060016006909101555182917fb4533ebb723117aaa2826214b6c86a33ab251ad1095b054f04c1679e300bdaa991a250565b3360009081526003602052604090205460ff16610a085760405162461bcd60e51b815260040161071e90612a5d565b610a1182611923565b15610a5e5760405162461bcd60e51b815260206004820152601a60248201527f566f74696e6720616c726561647920696e2070726f6772657373000000000000604482015260640161071e565b61ffff8316610aba5760405162461bcd60e51b815260206004820152602260248201527f566f74654e6f6e653a2043616e206e6f7420766f746520666f72206e6f7468696044820152616e6760f01b606482015260840161071e565b61ffff831660011415610b47576001600160a01b03821660009081526003602052604090205460ff1615610b425760405162461bcd60e51b815260206004820152602960248201527f566f746541646441646d696e3a204164647265737320697320616c72656164796044820152681030b71030b236b4b760b91b606482015260840161071e565b610de7565b61ffff831660021415610c32576001600160a01b03821660009081526003602052604090205460ff16610bcd5760405162461bcd60e51b815260206004820152602860248201527f566f746552656d6f766541646d696e3a2041646472657373206973206e6f742060448201526730b71030b236b4b760c11b606482015260840161071e565b6001600160a01b038216331415610b425760405162461bcd60e51b8152602060048201526024808201527f566f746552656d6f766541646d696e3a2043616e206e6f742072656d6f76652060448201526339b2b63360e11b606482015260840161071e565b61ffff831660031415610d87576040516301ffc9a760e01b81526319ab36c160e01b600482015282906001600160a01b038216906301ffc9a79060240160206040518083038186803b158015610c8757600080fd5b505afa158015610c9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cbf9190612a40565b610d315760405162461bcd60e51b815260206004820152603960248201527f566f74654368616e6765566f74696e673a2050726f706f73656420636f6e747260448201527f616374206e6f74206120766f74696e6720636f6e747261637400000000000000606482015260840161071e565b60008211610d815760405162461bcd60e51b815260206004820152601b60248201527f50726f706f73656420766f74696e6720706572696f6420697320300000000000604482015260640161071e565b50610de7565b606461ffff84161015610ddc5760405162461bcd60e51b815260206004820152601d60248201527f566f746541646d696e3a2074797065206e6f7420737570706f72746564000000604482015260640161071e565b610de7838383611e07565b6001600160a01b0382166000908152602081905260409020805461ffff191661ffff8516179055600154610e2c90600160a01b900467ffffffffffffffff1642612aaa565b6001600160a01b03808416600090815260208190526040902060028101929092556001918201839055905416610e6c57610e67826001612195565b505050565b610e6783836001612505565b60008215610ec9576001600160a01b0384166000908152602081905260409020600401805483908110610ead57610ead612ac2565b6000918252602090912001546001600160a01b03169050610ef6565b6001600160a01b0384166000908152602081905260409020600501805483908110610ead57610ead612ac2565b9392505050565b6000818152601360205260409020546001600160a01b031615610f5c5760405162461bcd60e51b81526020600482015260176024820152765472616e7366657220616c72656164792065786973747360481b604482015260640161071e565b6001600160a01b03831660009081526012602052604090205460ff16610fbd5760405162461bcd60e51b8152602060048201526016602482015275546f6b656e206e6f74207472616e7366657261626c6560501b604482015260640161071e565b6040516323b872dd60e01b8152336004820152306024820152604481018390526001600160a01b038416906323b872dd90606401602060405180830381600087803b15801561100b57600080fd5b505af115801561101f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110439190612a40565b6110815760405162461bcd60e51b815260206004820152600f60248201526e1d1c985b9cd9995c8819985a5b1959608a1b604482015260640161071e565b6000601154426110919190612aaa565b6040805160e081018252338082526001600160a01b0388811660208085019182528486018a8152606086018a815260006080880181815260a089018b815260c08a018381528e84526013909652918a9020985189549088166001600160a01b0319918216178a55955160018a018054919098169616959095179095559051600287015551600386015590516004850155905160058401555160069092019190915590519192509083907f470a379f66a6eef3070bd979b98c2dd6d7bfb668e17c67819722028655d5406190611187908890889087906001600160a01b039390931683526020830191909152604082015260600190565b60405180910390a350505050565b3360009081526003602052604090205460ff166111c45760405162461bcd60e51b815260040161071e90612a5d565b6111cd81611923565b61120b5760405162461bcd60e51b815260206004820152600f60248201526e566f7465206e6f742061637469766560881b604482015260640161071e565b6001600160a01b038116600090815260208190526040902060020154421161127f5760405162461bcd60e51b815260206004820152602160248201527f566f74696e6720706572696f6420686173206e6f7420796574206578706972656044820152601960fa1b606482015260840161071e565b6001546002546001600160a01b0383811660009081526020819052604080822090516319ab36c160e01b81529290941693909284926319ab36c1926112d99267ffffffffffffffff16916004808301926005019101612b21565b60206040518083038186803b1580156112f157600080fd5b505afa158015611305573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113299190612a40565b6001600160a01b0384166000818152602081815260409182902054825161ffff90911680825291810193909352831515838301529051929350917f9d4ce721e9765ae20e979179e0edb2b4d216041d2824a032c04687c7f0da764d9181900360600190a16113978483612195565b50505050565b3360009081526003602052604090205460ff166113fc5760405162461bcd60e51b815260206004820152601960248201527f4e6f7420616e20617574686f72697365642072656c6179657200000000000000604482015260640161071e565b6000818152600660205260409020546001600160a01b03161561145b5760405162461bcd60e51b81526020600482015260176024820152765472616e7366657220616c72656164792065786973747360481b604482015260640161071e565b6001600160a01b03808516600090815260056020526040902054166114bb5760405162461bcd60e51b8152602060048201526016602482015275546f6b656e206e6f74207472616e7366657261626c6560501b604482015260640161071e565b6000600454426114cb9190612aaa565b9050604051806101000160405280336001600160a01b03168152602001856001600160a01b03168152602001866001600160a01b031681526020018481526020018381526020016000801b815260200182815260200160008152506006600084815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060208201518160010160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e08201518160070155905050836001600160a01b0316336001600160a01b0316837f509a22359cd26b11a918295a1a78f9636ee8bef0e1252f3da5c631dee00c3693888786604051611659939291906001600160a01b039390931683526020830191909152604082015260600190565b60405180910390a45050505050565b6000828152600660205260409020546001600160a01b031661169c5760405162461bcd60e51b815260040161071e90612990565b6000828152600660205260409020600181015460028201546003909201546116d792859285926001600160a01b039182169290911690611d16565b6116f35760405162461bcd60e51b815260040161071e906129c7565b600082815260066020526040902060070154156117225760405162461bcd60e51b815260040161071e90612a09565b600082815260066020819052604090912001544211156117795760405162461bcd60e51b8152602060048201526012602482015271151c985b9cd9995c881d1a5b59590b5bdd5d60721b604482015260640161071e565b600082815260066020818152604080842060028101546001600160a01b03908116808752600585528387205496899052949093526001810154600390910154915163a9059cbb60e01b81529083166004820152602481019190915291921690819063a9059cbb90604401602060405180830381600087803b1580156117fd57600080fd5b505af1158015611811573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118359190612a40565b6118725760405162461bcd60e51b815260206004820152600e60248201526d1d1c985b99995c8819985a5b195960921b604482015260640161071e565b600084815260066020526040908190206005810185905560026007909101555184907fa70eb85bac87b136d136ad64b8d72ca165c84dcc438369df296bf4fddfb4a254906118c39086815260200190565b60405180910390a250505050565b600081815260136020526040812060060154158015611900575060008281526013602052604090206005015442115b1561190d57506003919050565b5060009081526013602052604090206006015490565b6001600160a01b031660009081526020819052604090205461ffff16151590565b60008160405160200161195991815260200190565b604051602081830303815290604052805190602001208314905092915050565b60008181526006602081905260408220015442111561199a57506003919050565b5060009081526006602052604090206007015490565b601e54610100900460ff16806119c95750601e5460ff16155b611a2c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161071e565b601e54610100900460ff16158015611a4e57601e805461ffff19166101011790555b611a84336000908152600360205260409020805460ff191660019081179091556002805467ffffffffffffffff19169091179055565b601183905560048290558015610e6757601e805461ff0019169055505050565b600080600080600080611ace876000908152601360205260409020546001600160a01b0316151590565b611aea5760405162461bcd60e51b815260040161071e90612990565b5050506000938452505060136020525060409020805460018201546002830154600484015460058501546006909501546001600160a01b039485169694909316949193909290565b3360009081526003602052604090205460ff16611b615760405162461bcd60e51b815260040161071e90612a5d565b611b6a82611923565b611ba85760405162461bcd60e51b815260206004820152600f60248201526e566f7465206e6f742061637469766560881b604482015260640161071e565b6001600160a01b038216600090815260208190526040902060020154421115611c135760405162461bcd60e51b815260206004820152601960248201527f566f74696e6720706572696f6420686173206578706972656400000000000000604482015260640161071e565b6001600160a01b03821660009081526020818152604080832033845260030190915290205460ff1615611c885760405162461bcd60e51b815260206004820152601960248201527f4163636f756e742068617320616c726561647920766f74656400000000000000604482015260640161071e565b6001600160a01b03821660009081526020819052604090205461ffff848116911614611d0b5760405162461bcd60e51b815260206004820152602c60248201527f566f74696e6720616374696f6e20646f6573206e6f74206d617463682061637460448201526b1a5d99481c1c9bdc1bdcd85b60a21b606482015260840161071e565b610e67838383612505565b604080516020808201969096526bffffffffffffffffffffffff19606095861b8116828401529390941b9092166054840152606880840191909152815180840390910181526088909201905280519101201490565b6000806000806000806000611d97886000908152600660205260409020546001600160a01b0316151590565b611db35760405162461bcd60e51b815260040161071e90612990565b5050506000948552505060066020819052604090932080546001820154600283015460038401546005850154978501546007909501546001600160a01b039485169993851698949092169650945091929190565b61ffff831660641415611e91576001600160a01b03821615610e675760405162461bcd60e51b815260206004820152603f60248201527f417070566f74653a20766f746520746172676574206d757374206265207a657260448201527f6f207768656e206368616e67696e6720736f757263652074696d656c6f636b00606482015260840161071e565b61ffff831660651415611f29576001600160a01b03821615610e675760405162461bcd60e51b8152602060048201526044602482018190527f417070566f74653a20766f746520746172676574206d757374206265207a6572908201527f6f207768656e206368616e67696e672064657374696e6174696f6e2074696d656064820152636c6f636b60e01b608482015260a40161071e565b61ffff831660661415611fb3576001600160a01b03821660009081526012602052604090205460ff1615610e675760405162461bcd60e51b815260206004820152602b60248201527f417070566f74653a2043616e206e6f7420616464206578697374696e6720736f60448201526a3ab931b2903a37b5b2b71760a91b606482015260840161071e565b61ffff83166067141561203e576001600160a01b03821660009081526012602052604090205460ff16610e675760405162461bcd60e51b815260206004820152602d60248201527f417070566f74653a2043616e206e6f742072656d6f766520756e6b6e6f776e2060448201526c39b7bab931b2903a37b5b2b71760991b606482015260840161071e565b61ffff8316606814156120c5576001600160a01b038083166000908152600560205260409020541615610e675760405162461bcd60e51b815260206004820152602960248201527f417070566f74653a2043616e206e6f7420616464206578697374696e6720646560448201526839ba103a37b5b2b71760b91b606482015260840161071e565b61ffff83166069141561214d576001600160a01b0380831660009081526005602052604090205416610e675760405162461bcd60e51b815260206004820152602b60248201527f417070566f74653a2043616e206e6f742072656d6f766520756e6b6e6f776e2060448201526a3232b9ba103a37b5b2b71760a91b606482015260840161071e565b60405162461bcd60e51b815260206004820181905260248201527f417070566f74653a20556e737570706f7274656420766f746520616374696f6e604482015260640161071e565b80156122c4576001600160a01b0382166000908152602081905260409020805460019182015461ffff90911691821415612230576001600160a01b0384166000908152600360205260408120805460ff191660011790556002805467ffffffffffffffff169161220483612b60565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550506122c1565b61ffff821660021415612275576001600160a01b0384166000908152600360205260408120805460ff191690556002805467ffffffffffffffff169161220483612b88565b61ffff8216600314156122b6576001805467ffffffffffffffff8316600160a01b026001600160e01b03199091166001600160a01b038716171790556122c1565b6122c1828583612609565b50505b6001600160a01b0382166000908152602081815260408083206004018054825181850281018501909352808352919290919083018282801561232f57602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612311575b5050505050905060005b81518110156123ba57600080856001600160a01b03166001600160a01b03168152602001908152602001600020600301600083838151811061237d5761237d612ac2565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169055806123b281612bac565b915050612339565b506001600160a01b0383166000908152602081815260408083206005018054825181850281018501909352808352919290919083018282801561242657602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311612408575b5050505050905060005b81518110156124b157600080866001600160a01b03166001600160a01b03168152602001908152602001600020600301600083838151811061247457612474612ac2565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff19169055806124a981612bac565b915050612430565b506001600160a01b0384166000908152602081905260408120805461ffff191681556001810182905560028101829055906124ef6004830182612708565b6124fd600583016000612708565b505050505050565b6040805133815261ffff851660208201526001600160a01b03841681830152821515606082015290517f32b8c3a9535767c48b7f4575cbd5402f63b03ba60ee9767254ee701a41123b069181900360800190a16001600160a01b0382166000908152602081815260408083203384526003019091529020805460ff1916600117905580156125cb576001600160a01b0382166000908152602081815260408220600401805460018101825590835291200180546001600160a01b03191633179055505050565b6001600160a01b0382166000908152602081815260408220600501805460018101825590835291200180546001600160a01b03191633179055505050565b61ffff83166064141561261d576011555050565b61ffff831660651415612631576004555050565b61ffff831660661415612666576001600160a01b0382166000908152601260205260409020805460ff19166001179055505050565b61ffff83166067141561269657506001600160a01b03166000908152601260205260409020805460ff1916905550565b61ffff8316606814156126d2576001600160a01b03918216600090815260056020526040902080546001600160a01b0319169190921617905550565b61ffff831660691415610e6757506001600160a01b0316600090815260056020526040902080546001600160a01b031916905550565b50805460008255906000526020600020908101906127269190612729565b50565b5b8082111561273e576000815560010161272a565b5090565b80356001600160a01b038116811461275957600080fd5b919050565b801515811461272657600080fd5b6000806040838503121561277f57600080fd5b61278883612742565b915060208301356127988161275e565b809150509250929050565b600080604083850312156127b657600080fd5b50508035926020909101359150565b6000602082840312156127d757600080fd5b5035919050565b803561ffff8116811461275957600080fd5b60008060006060848603121561280557600080fd5b61280e846127de565b925061281c60208501612742565b9150604084013590509250925092565b60006020828403121561283e57600080fd5b610ef682612742565b60008060006060848603121561285c57600080fd5b61286584612742565b925060208401356128758161275e565b929592945050506040919091013590565b60008060006060848603121561289b57600080fd5b6128a484612742565b95602085013595506040909401359392505050565b600080600080608085870312156128cf57600080fd5b6128d885612742565b93506128e660208601612742565b93969395505050506040820135916060013590565b60008060006060848603121561291057600080fd5b612919846127de565b925061292760208501612742565b915060408401356129378161275e565b809150509250925092565b600080600080600060a0868803121561295a57600080fd5b853594506020860135935061297160408701612742565b925061297f60608701612742565b949793965091946080013592915050565b60208082526017908201527f5472616e7366657220646f6573206e6f74206578697374000000000000000000604082015260600190565b60208082526022908201527f507265696d61676520646f6573206e6f74206d6174636820636f6d6d69746d656040820152611b9d60f21b606082015260800190565b6020808252601a908201527f5472616e73666572206e6f7420696e206f70656e207374617465000000000000604082015260600190565b600060208284031215612a5257600080fd5b8151610ef68161275e565b6020808252601a908201527f6d73672e73656e646572206973206e6f7420616e2061646d696e000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b60008219821115612abd57612abd612a94565b500190565b634e487b7160e01b600052603260045260246000fd5b6000815480845260208085019450836000528060002060005b83811015612b165781546001600160a01b031687529582019560019182019101612af1565b509495945050505050565b67ffffffffffffffff84168152606060208201526000612b446060830185612ad8565b8281036040840152612b568185612ad8565b9695505050505050565b600067ffffffffffffffff80831681811415612b7e57612b7e612a94565b6001019392505050565b600067ffffffffffffffff821680612ba257612ba2612a94565b6000190192915050565b6000600019821415612bc057612bc0612a94565b506001019056fea26469706673582212207bf5e26b189a66b417a268c6a7b7255652ed4bca8a19e5be7a6f181937ba52d264736f6c63430008090033";

    public static final String FUNC_ACTIONVOTES = "actionVotes";

    public static final String FUNC_DESTALLOWEDTOKENS = "destAllowedTokens";

    public static final String FUNC_DESTTIMELOCKPERIOD = "destTimeLockPeriod";

    public static final String FUNC_DESTTRANSFEREXISTS = "destTransferExists";

    public static final String FUNC_DESTTRANSFEREXPIRED = "destTransferExpired";

    public static final String FUNC_DESTTRANSFERSTATE = "destTransferState";

    public static final String FUNC_ENDOFVOTINGPERIOD = "endOfVotingPeriod";

    public static final String FUNC_FINALISETRANSFERFROMOTHERBLOCKCHAIN = "finaliseTransferFromOtherBlockchain";

    public static final String FUNC_FINALISETRANSFERTOOTHERBLOCKCHAIN = "finaliseTransferToOtherBlockchain";

    public static final String FUNC_GETDESTINFO = "getDestInfo";

    public static final String FUNC_GETNUMADMINS = "getNumAdmins";

    public static final String FUNC_GETSOURCEINFO = "getSourceInfo";

    public static final String FUNC_GETVOTINGCONFIG = "getVotingConfig";

    public static final String FUNC_INITIALISE = "initialise";

    public static final String FUNC_ISADMIN = "isAdmin";

    public static final String FUNC_ISDESTALLOWEDTOKEN = "isDestAllowedToken";

    public static final String FUNC_ISSOURCEALLOWEDTOKEN = "isSourceAllowedToken";

    public static final String FUNC_ISVOTEACTIVE = "isVoteActive";

    public static final String FUNC_NEWTRANSFERFROMOTHERBLOCKCHAIN = "newTransferFromOtherBlockchain";

    public static final String FUNC_NEWTRANSFERTOOTHERBLOCKCHAIN = "newTransferToOtherBlockchain";

    public static final String FUNC_NUMVOTES = "numVotes";

    public static final String FUNC_PREIMAGEMATCHESCOMMITMENT = "preimageMatchesCommitment";

    public static final String FUNC_PREIMAGEMATCHESCOMMITMENTOLD = "preimageMatchesCommitmentOld";

    public static final String FUNC_PROPOSEVOTE = "proposeVote";

    public static final String FUNC_REFUNDTRANSFERTOOTHERBLOCKCHAIN = "refundTransferToOtherBlockchain";

    public static final String FUNC_SOURCEALLOWEDTOKENS = "sourceAllowedTokens";

    public static final String FUNC_SOURCETIMELOCKPERIOD = "sourceTimeLockPeriod";

    public static final String FUNC_SOURCETRANSFEREXISTS = "sourceTransferExists";

    public static final String FUNC_SOURCETRANSFEREXPIRED = "sourceTransferExpired";

    public static final String FUNC_SOURCETRANSFERSTATE = "sourceTransferState";

    public static final String FUNC_VERSION = "version";

    public static final String FUNC_VOTE = "vote";

    public static final String FUNC_VOTEPERIODEXPIRED = "votePeriodExpired";

    public static final String FUNC_VOTETYPE = "voteType";

    public static final String FUNC_WHOVOTED = "whoVoted";

    public static final Event DESTTRANSFERCOMPLETED_EVENT = new Event("DestTransferCompleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event DESTTRANSFERINIT_EVENT = new Event("DestTransferInit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event DESTTRANSFERREFUNDED_EVENT = new Event("DestTransferRefunded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event SOURCETRANSFERCOMPLETED_EVENT = new Event("SourceTransferCompleted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event SOURCETRANSFERINIT_EVENT = new Event("SourceTransferInit", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}, new TypeReference<Address>(true) {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
    ;

    public static final Event SOURCETRANSFERREFUNDED_EVENT = new Event("SourceTransferRefunded", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>(true) {}));
    ;

    public static final Event VOTERESULT_EVENT = new Event("VoteResult", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    public static final Event VOTED_EVENT = new Event("Voted", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint16>() {}, new TypeReference<Address>() {}, new TypeReference<Bool>() {}));
    ;

    @Deprecated
    protected Erc20HtlcTransfer(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected Erc20HtlcTransfer(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected Erc20HtlcTransfer(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    protected Erc20HtlcTransfer(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public List<DestTransferCompletedEventResponse> getDestTransferCompletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DESTTRANSFERCOMPLETED_EVENT, transactionReceipt);
        ArrayList<DestTransferCompletedEventResponse> responses = new ArrayList<DestTransferCompletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DestTransferCompletedEventResponse typedResponse = new DestTransferCompletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.preimage = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DestTransferCompletedEventResponse> destTransferCompletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DestTransferCompletedEventResponse>() {
            @Override
            public DestTransferCompletedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DESTTRANSFERCOMPLETED_EVENT, log);
                DestTransferCompletedEventResponse typedResponse = new DestTransferCompletedEventResponse();
                typedResponse.log = log;
                typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.preimage = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DestTransferCompletedEventResponse> destTransferCompletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DESTTRANSFERCOMPLETED_EVENT));
        return destTransferCompletedEventFlowable(filter);
    }

    public List<DestTransferInitEventResponse> getDestTransferInitEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DESTTRANSFERINIT_EVENT, transactionReceipt);
        ArrayList<DestTransferInitEventResponse> responses = new ArrayList<DestTransferInitEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DestTransferInitEventResponse typedResponse = new DestTransferInitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.relayer = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.recipient = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.tokenContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.timeLock = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DestTransferInitEventResponse> destTransferInitEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DestTransferInitEventResponse>() {
            @Override
            public DestTransferInitEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DESTTRANSFERINIT_EVENT, log);
                DestTransferInitEventResponse typedResponse = new DestTransferInitEventResponse();
                typedResponse.log = log;
                typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.relayer = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.recipient = (String) eventValues.getIndexedValues().get(2).getValue();
                typedResponse.tokenContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.timeLock = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DestTransferInitEventResponse> destTransferInitEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DESTTRANSFERINIT_EVENT));
        return destTransferInitEventFlowable(filter);
    }

    public List<DestTransferRefundedEventResponse> getDestTransferRefundedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DESTTRANSFERREFUNDED_EVENT, transactionReceipt);
        ArrayList<DestTransferRefundedEventResponse> responses = new ArrayList<DestTransferRefundedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DestTransferRefundedEventResponse typedResponse = new DestTransferRefundedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<DestTransferRefundedEventResponse> destTransferRefundedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, DestTransferRefundedEventResponse>() {
            @Override
            public DestTransferRefundedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(DESTTRANSFERREFUNDED_EVENT, log);
                DestTransferRefundedEventResponse typedResponse = new DestTransferRefundedEventResponse();
                typedResponse.log = log;
                typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<DestTransferRefundedEventResponse> destTransferRefundedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DESTTRANSFERREFUNDED_EVENT));
        return destTransferRefundedEventFlowable(filter);
    }

    public List<SourceTransferCompletedEventResponse> getSourceTransferCompletedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SOURCETRANSFERCOMPLETED_EVENT, transactionReceipt);
        ArrayList<SourceTransferCompletedEventResponse> responses = new ArrayList<SourceTransferCompletedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SourceTransferCompletedEventResponse typedResponse = new SourceTransferCompletedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SourceTransferCompletedEventResponse> sourceTransferCompletedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SourceTransferCompletedEventResponse>() {
            @Override
            public SourceTransferCompletedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SOURCETRANSFERCOMPLETED_EVENT, log);
                SourceTransferCompletedEventResponse typedResponse = new SourceTransferCompletedEventResponse();
                typedResponse.log = log;
                typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SourceTransferCompletedEventResponse> sourceTransferCompletedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SOURCETRANSFERCOMPLETED_EVENT));
        return sourceTransferCompletedEventFlowable(filter);
    }

    public List<SourceTransferInitEventResponse> getSourceTransferInitEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SOURCETRANSFERINIT_EVENT, transactionReceipt);
        ArrayList<SourceTransferInitEventResponse> responses = new ArrayList<SourceTransferInitEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SourceTransferInitEventResponse typedResponse = new SourceTransferInitEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.sender = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.tokenContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.timeLock = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SourceTransferInitEventResponse> sourceTransferInitEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SourceTransferInitEventResponse>() {
            @Override
            public SourceTransferInitEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SOURCETRANSFERINIT_EVENT, log);
                SourceTransferInitEventResponse typedResponse = new SourceTransferInitEventResponse();
                typedResponse.log = log;
                typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                typedResponse.sender = (String) eventValues.getIndexedValues().get(1).getValue();
                typedResponse.tokenContract = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse.timeLock = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SourceTransferInitEventResponse> sourceTransferInitEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SOURCETRANSFERINIT_EVENT));
        return sourceTransferInitEventFlowable(filter);
    }

    public List<SourceTransferRefundedEventResponse> getSourceTransferRefundedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SOURCETRANSFERREFUNDED_EVENT, transactionReceipt);
        ArrayList<SourceTransferRefundedEventResponse> responses = new ArrayList<SourceTransferRefundedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SourceTransferRefundedEventResponse typedResponse = new SourceTransferRefundedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<SourceTransferRefundedEventResponse> sourceTransferRefundedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, SourceTransferRefundedEventResponse>() {
            @Override
            public SourceTransferRefundedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(SOURCETRANSFERREFUNDED_EVENT, log);
                SourceTransferRefundedEventResponse typedResponse = new SourceTransferRefundedEventResponse();
                typedResponse.log = log;
                typedResponse.commitment = (byte[]) eventValues.getIndexedValues().get(0).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<SourceTransferRefundedEventResponse> sourceTransferRefundedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(SOURCETRANSFERREFUNDED_EVENT));
        return sourceTransferRefundedEventFlowable(filter);
    }

    public List<VoteResultEventResponse> getVoteResultEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VOTERESULT_EVENT, transactionReceipt);
        ArrayList<VoteResultEventResponse> responses = new ArrayList<VoteResultEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VoteResultEventResponse typedResponse = new VoteResultEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._voteTarget = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._result = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VoteResultEventResponse> voteResultEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VoteResultEventResponse>() {
            @Override
            public VoteResultEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOTERESULT_EVENT, log);
                VoteResultEventResponse typedResponse = new VoteResultEventResponse();
                typedResponse.log = log;
                typedResponse._action = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._voteTarget = (String) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._result = (Boolean) eventValues.getNonIndexedValues().get(2).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VoteResultEventResponse> voteResultEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTERESULT_EVENT));
        return voteResultEventFlowable(filter);
    }

    public List<VotedEventResponse> getVotedEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(VOTED_EVENT, transactionReceipt);
        ArrayList<VotedEventResponse> responses = new ArrayList<VotedEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            VotedEventResponse typedResponse = new VotedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse._participant = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse._action = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse._voteTarget = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse._votedFor = (Boolean) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public Flowable<VotedEventResponse> votedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(new Function<Log, VotedEventResponse>() {
            @Override
            public VotedEventResponse apply(Log log) {
                Contract.EventValuesWithLog eventValues = extractEventParametersWithLog(VOTED_EVENT, log);
                VotedEventResponse typedResponse = new VotedEventResponse();
                typedResponse.log = log;
                typedResponse._participant = (String) eventValues.getNonIndexedValues().get(0).getValue();
                typedResponse._action = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
                typedResponse._voteTarget = (String) eventValues.getNonIndexedValues().get(2).getValue();
                typedResponse._votedFor = (Boolean) eventValues.getNonIndexedValues().get(3).getValue();
                return typedResponse;
            }
        });
    }

    public Flowable<VotedEventResponse> votedEventFlowable(DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(VOTED_EVENT));
        return votedEventFlowable(filter);
    }

    public RemoteFunctionCall<TransactionReceipt> actionVotes(String _voteTarget) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_ACTIONVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _voteTarget)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<String> destAllowedTokens(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DESTALLOWEDTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<BigInteger> destTimeLockPeriod() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DESTTIMELOCKPERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> destTransferExists(byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DESTTRANSFEREXISTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> destTransferExpired(byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DESTTRANSFEREXPIRED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> destTransferState(byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_DESTTRANSFERSTATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> endOfVotingPeriod(String _voteTarget) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ENDOFVOTINGPERIOD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _voteTarget)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> finaliseTransferFromOtherBlockchain(byte[] _commitment, byte[] _preimageSalt) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FINALISETRANSFERFROMOTHERBLOCKCHAIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment), 
                new org.web3j.abi.datatypes.generated.Bytes32(_preimageSalt)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> finaliseTransferToOtherBlockchain(byte[] _commitment, byte[] _preimageSalt) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_FINALISETRANSFERTOOTHERBLOCKCHAIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment), 
                new org.web3j.abi.datatypes.generated.Bytes32(_preimageSalt)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Tuple7<String, String, String, BigInteger, byte[], BigInteger, BigInteger>> getDestInfo(byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETDESTINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple7<String, String, String, BigInteger, byte[], BigInteger, BigInteger>>(function,
                new Callable<Tuple7<String, String, String, BigInteger, byte[], BigInteger, BigInteger>>() {
                    @Override
                    public Tuple7<String, String, String, BigInteger, byte[], BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<String, String, String, BigInteger, byte[], BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (String) results.get(2).getValue(), 
                                (BigInteger) results.get(3).getValue(), 
                                (byte[]) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue(), 
                                (BigInteger) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> getNumAdmins() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETNUMADMINS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint64>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple6<String, String, BigInteger, byte[], BigInteger, BigInteger>> getSourceInfo(byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETSOURCEINFO, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        return new RemoteFunctionCall<Tuple6<String, String, BigInteger, byte[], BigInteger, BigInteger>>(function,
                new Callable<Tuple6<String, String, BigInteger, byte[], BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<String, String, BigInteger, byte[], BigInteger, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, BigInteger, byte[], BigInteger, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (String) results.get(1).getValue(), 
                                (BigInteger) results.get(2).getValue(), 
                                (byte[]) results.get(3).getValue(), 
                                (BigInteger) results.get(4).getValue(), 
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple2<String, BigInteger>> getVotingConfig() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_GETVOTINGCONFIG, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint64>() {}));
        return new RemoteFunctionCall<Tuple2<String, BigInteger>>(function,
                new Callable<Tuple2<String, BigInteger>>() {
                    @Override
                    public Tuple2<String, BigInteger> call() throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple2<String, BigInteger>(
                                (String) results.get(0).getValue(), 
                                (BigInteger) results.get(1).getValue());
                    }
                });
    }

    public RemoteFunctionCall<TransactionReceipt> initialise(BigInteger _sourceTimeLock, BigInteger _destTimeLock) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_INITIALISE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint256(_sourceTimeLock), 
                new org.web3j.abi.datatypes.generated.Uint256(_destTimeLock)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> isAdmin(String _mightBeAdmin) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISADMIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _mightBeAdmin)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isDestAllowedToken(String _tokenContract) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISDESTALLOWEDTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _tokenContract)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isSourceAllowedToken(String _tokenContract) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISSOURCEALLOWEDTOKEN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _tokenContract)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isVoteActive(String _voteTarget) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_ISVOTEACTIVE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _voteTarget)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> newTransferFromOtherBlockchain(String _otherBlockchainTokenContract, String _recipient, BigInteger _amount, byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_NEWTRANSFERFROMOTHERBLOCKCHAIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _otherBlockchainTokenContract), 
                new org.web3j.abi.datatypes.Address(160, _recipient), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount), 
                new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> newTransferToOtherBlockchain(String _tokenContract, BigInteger _amount, byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_NEWTRANSFERTOOTHERBLOCKCHAIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _tokenContract), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount), 
                new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<BigInteger> numVotes(String _voteTarget, Boolean _votedFor) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_NUMVOTES, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _voteTarget), 
                new org.web3j.abi.datatypes.Bool(_votedFor)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> preimageMatchesCommitment(byte[] _commitment, byte[] _preimage, String _user, String _token, BigInteger _amount) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PREIMAGEMATCHESCOMMITMENT, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment), 
                new org.web3j.abi.datatypes.generated.Bytes32(_preimage), 
                new org.web3j.abi.datatypes.Address(160, _user), 
                new org.web3j.abi.datatypes.Address(160, _token), 
                new org.web3j.abi.datatypes.generated.Uint256(_amount)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> preimageMatchesCommitmentOld(byte[] _commitment, byte[] _preimage) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_PREIMAGEMATCHESCOMMITMENTOLD, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment), 
                new org.web3j.abi.datatypes.generated.Bytes32(_preimage)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<TransactionReceipt> proposeVote(BigInteger _action, String _voteTarget, BigInteger _additionalInfo1) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_PROPOSEVOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint16(_action), 
                new org.web3j.abi.datatypes.Address(160, _voteTarget), 
                new org.web3j.abi.datatypes.generated.Uint256(_additionalInfo1)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> refundTransferToOtherBlockchain(byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_REFUNDTRANSFERTOOTHERBLOCKCHAIN, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> sourceAllowedTokens(String param0) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SOURCEALLOWEDTOKENS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, param0)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> sourceTimeLockPeriod() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SOURCETIMELOCKPERIOD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Boolean> sourceTransferExists(byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SOURCETRANSFEREXISTS, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> sourceTransferExpired(byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SOURCETRANSFEREXPIRED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> sourceTransferState(byte[] _commitment) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_SOURCETRANSFERSTATE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Bytes32(_commitment)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<BigInteger> version() {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VERSION, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<TransactionReceipt> vote(BigInteger _action, String _voteTarget, Boolean _voteFor) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(
                FUNC_VOTE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.generated.Uint16(_action), 
                new org.web3j.abi.datatypes.Address(160, _voteTarget), 
                new org.web3j.abi.datatypes.Bool(_voteFor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> votePeriodExpired(String _voteTarget) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VOTEPERIODEXPIRED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _voteTarget)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> voteType(String _voteTarget) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_VOTETYPE, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _voteTarget)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint16>() {}));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<String> whoVoted(String _voteTarget, Boolean _votedFor, BigInteger _index) {
        final org.web3j.abi.datatypes.Function function = new org.web3j.abi.datatypes.Function(FUNC_WHOVOTED, 
                Arrays.<Type>asList(new org.web3j.abi.datatypes.Address(160, _voteTarget), 
                new org.web3j.abi.datatypes.Bool(_votedFor), 
                new org.web3j.abi.datatypes.generated.Uint256(_index)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    @Deprecated
    public static Erc20HtlcTransfer load(String contractAddress, Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return new Erc20HtlcTransfer(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static Erc20HtlcTransfer load(String contractAddress, Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new Erc20HtlcTransfer(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static Erc20HtlcTransfer load(String contractAddress, Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return new Erc20HtlcTransfer(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static Erc20HtlcTransfer load(String contractAddress, Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new Erc20HtlcTransfer(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<Erc20HtlcTransfer> deploy(Web3j web3j, Credentials credentials, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Erc20HtlcTransfer.class, web3j, credentials, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Erc20HtlcTransfer> deploy(Web3j web3j, Credentials credentials, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Erc20HtlcTransfer.class, web3j, credentials, gasPrice, gasLimit, BINARY, "");
    }

    public static RemoteCall<Erc20HtlcTransfer> deploy(Web3j web3j, TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(Erc20HtlcTransfer.class, web3j, transactionManager, contractGasProvider, BINARY, "");
    }

    @Deprecated
    public static RemoteCall<Erc20HtlcTransfer> deploy(Web3j web3j, TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(Erc20HtlcTransfer.class, web3j, transactionManager, gasPrice, gasLimit, BINARY, "");
    }

    public static class DestTransferCompletedEventResponse extends BaseEventResponse {
        public byte[] commitment;

        public byte[] preimage;
    }

    public static class DestTransferInitEventResponse extends BaseEventResponse {
        public byte[] commitment;

        public String relayer;

        public String recipient;

        public String tokenContract;

        public BigInteger amount;

        public BigInteger timeLock;
    }

    public static class DestTransferRefundedEventResponse extends BaseEventResponse {
        public byte[] commitment;
    }

    public static class SourceTransferCompletedEventResponse extends BaseEventResponse {
        public byte[] commitment;
    }

    public static class SourceTransferInitEventResponse extends BaseEventResponse {
        public byte[] commitment;

        public String sender;

        public String tokenContract;

        public BigInteger amount;

        public BigInteger timeLock;
    }

    public static class SourceTransferRefundedEventResponse extends BaseEventResponse {
        public byte[] commitment;
    }

    public static class VoteResultEventResponse extends BaseEventResponse {
        public BigInteger _action;

        public String _voteTarget;

        public Boolean _result;
    }

    public static class VotedEventResponse extends BaseEventResponse {
        public String _participant;

        public BigInteger _action;

        public String _voteTarget;

        public Boolean _votedFor;
    }
}
